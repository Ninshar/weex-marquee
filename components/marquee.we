<template>
	<div class="wrapper" style="height:{{fontheight}}">
		<div id="marquee" class="marquee">
			<text repeat="list in marqueelist" class="text" style="color:{{color}};font-height:{{fontheight}};font-size:{{fontsize}};line-height:{{fontheight}}">{{text}}:{{list}}</text>
		</div>
	</div>
</template>

<style>
	.wrapper { 
		width: 750;
		overflow: hidden;
	}
</style>

<script>
let animation = require('@weex-module/animation');
require('weex-components');

var timemarquee;
module.exports = {
	data: {
		color: '#ff0000',
		text: '',
		fontheight:"40",//字体高度
		fontsize:"30",//字体大小
		index:0,//记录当前指向
		marqueelist:[],//数据
		interval:2000,//默认两个动画间隔2000毫秒
		duration:500,//默认一次动画持续500毫秒
		current_translate:"",//动画
		timefn:"ease-out",//默认这个动画函数
		transformOrigin:"center center",
	},
	created() {
		this.color = '#ff0000';
		this.text = 'This is marquee Test.';
		this.marqueelist = this.marqueelist.concat(this.marqueelist[0]);//将开头的一个数据0追加到最后,0~9变成0~0
	},
	ready(){
		let length = this.marqueelist.length;//记录数组长度
		let step = 100/length;//记录步数

		timemarquee = setInterval(()=>{
			if(this.index<length-1){
				this.current_translate = "translate(0, -"+step*(this.index+1)+"%)";
				// 执行动画
				this.anim({
					transform:this.current_translate
				},this.duration,()=>{});

				this.index++;//跳到下一个
			}
			else{
				// 到尾部后需要回到开头,而开头还是数据0
				this.current_translate = "translate(0,0)";
				// 执行动画,时间设置为1毫秒,立即执行跳过动画,此时开头是数据中的最后一个0
				this.anim({
					transform:this.current_translate,
				},1,()=>{
					//执行完成上面的动画后此时开头变成了数据中第一个0
					setTimeout(()=>{
						// 最后再执行动画,仿佛无限滚动了一样
						this.anim({
							transform:"translate(0,-"+step+"%)"
						},this.duration,()=>{});
					},0);
				});
				
				this.index = 1;//定位到第二个这里
			}
		},this.interval);
	},
	methods:{
		// 执行动画
		anim(styles,duration,callback){
			animation.transition(this._ids.marquee.el.ref,{
				styles:styles,
				timingFunction:this.timefn,
				duration:duration
			},callback);
		},
	}
}
</script>
